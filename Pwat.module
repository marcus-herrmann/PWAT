<?php namespace ProcessWire;

/**
 * ProcessWire Accessibility Tools Module
 *
 * See README.md for usage instructions.
 *
 * @author Marcus Herrmann <github@marcus-herrmann.com>
 * @version 0.1.0
 * @see https://github.com/marcus-herrmann/PWAT
 */

class Pwat extends Process implements ConfigurableModule
{

    const rolename = 'pwat_user';


    /**
     * @return array
     */
    public static function getModuleInfo()
    {

        return array(
          'title'    => 'PWAT',
          'version'  => 10,
          'summary'  => 'ProcessWire Accessibility Tools',
          'singular' => true,
          'autoload' => true,
          'icon'     => 'universal-access',
        );
    }


    /**
     * @return array
     */
    static public function getDefaultConfig()
    {
        return array(
          'visibleOnAdminPages'   => 0,
          'enableTota11y'         => 1,
          'enableGrayscaleToggle' => 0,
          'enableWaveLink'        => 0
        );
    }


    /**
     * @param array $data
     *
     * @return \ProcessWire\InputfieldWrapper
     */
    static public function getModuleConfigInputfields(array $data)
    {

        $modules  = wire('modules');
        $fields   = new InputfieldWrapper();
        $defaults = self::getDefaultConfig();
        $data     = array_merge($defaults, $data);

        $field = $modules->get('InputfieldCheckbox');
        $field->attr('name', 'visibleOnAdminPages');
        $field->label = __('PWAT visible on admin pages');

        $field->attr('value',
          $data['visibleOnAdminPages'] ? $data['visibleOnAdminPages'] : 0);
        $field->attr('checked',
          $data['visibleOnAdminPages'] === 1 ? 'checked' : '');

        $fields->add($field);

        $field = $modules->get('InputfieldCheckbox');
        $field->attr('name', 'enableTota11y');
        $field->label = __('Enable tota11y');

        $field->attr('value',
          $data['enableTota11y'] ? $data['enableTota11y'] : 0);
        $field->attr('checked',
          $data['enableTota11y'] === 1 ? 'checked' : '');

        $fields->add($field);

        $field = $modules->get('InputfieldCheckbox');
        $field->attr('name', 'enableGrayscaleToggle');
        $field->label = __('Enable grayscale toggle');

        $field->attr('value',
          $data['enableGrayscaleToggle'] ? $data['enableGrayscaleToggle'] : 0);
        $field->attr('checked',
          $data['enableGrayscaleToggle'] === 1 ? 'checked' : '');

        $fields->add($field);

        $field = $modules->get('InputfieldCheckbox');
        $field->attr('name', 'enableWaveLink');
        $field->label = __('Enable link to WAVE');

        $field->attr('value',
          $data['enableWaveLink'] ? $data['enableWaveLink'] : 0);
        $field->attr('checked',
          $data['enableWaveLink'] === 1 ? 'checked' : '');

        $fields->add($field);


        return $fields;
    }

    public function ___install()
    {

        if (!wire("roles")->get(self::rolename)->id) {
            wire("roles")->add(self::rolename);
        }

        $this->message("Module is installed. Do not forget to grant users the 'pwat_user' role.");
    }

    public function ___uninstall()
    {

        if (wire("roles")->get(self::rolename)->id) {
            wire("roles")->delete(wire('roles')->get(self::rolename));
        }
    }

    public function init()
    {
        $this->addHookAfter('Page::render', $this, 'addPwatAssets');
    }

    public function addPwatAssets($event)
    {

        $page = $event->object;

        // Check if user has required role
        if (!wire('user')->hasRole(self::rolename)) {
            return;
        }

        // Check if tools are allowed on admin pages
        if ($page->template == 'admin' && $this->visibleOnAdminPages != "1") {
            return;
        }

        // If totally is active, add its assets
        if ($this->enableTota11y == "1") {
            $this->addTota11yAssets($event);
        }

        // If greyscale is active, add its assets
        if ($this->enableGrayscaleToggle == "1") {
            $this->addGrayscaleToggle($event);
        }

        // If greyscale is active, add its assets
        if ($this->enableWaveLink == "1") {
            $this->addWaveLink($event);
        }

        // In any case, add generic PWAT assets
        return $event->return = str_replace("</body>",
          "<link rel='stylesheet' href='" . wire('config')->urls->siteModules . "Pwat/css/pwat.css'></body>",
          $event->return);
    }

    /**
     * @param $event
     *
     * @return mixed
     */
    private function addTota11yAssets($event)
    {
        return $event->return = str_replace("</body>",
          "<script src='" . wire('config')->urls->siteModules . "Pwat/js/totally.min.js'></script>
                    </body>",
          $event->return);
    }

    /**
     * @param $event
     *
     * @return mixed
     */
    private function addGrayscaleToggle($event)
    {
        return $event->return = str_replace("</body>",
          "<button aria-pressed='false' class='pwat-button' 
                    id='pwat-grayscale-toggle' title='Toggle grayscale'><span aria-hidden='true'>S/W</span>
                    <span class='pwat-visually-hidden'>Toggle grayscale</span>
                    </button>
                    <script src='" . wire('config')->urls->siteModules . "Pwat/js/grayscale.js'></script></body>",
          $event->return);
    }

    /**
     * @param $event
     *
     * @return mixed
     */
    private function addWaveLink($event)
    {
        return $event->return = str_replace("</body>",
          "<a href='http://wave.webaim.org/report#/{$event->object->httpUrl}' 
                    target='_blank' id='pwat-wave-link' class='pwat-button' 
                    aria-label='Test page with WAVE' title='Test page with WAVE'>
                    <span aria-hidden='true'>WAVE</span>
                   <span class='pwat-visually-hidden'>Test page with WAVE</span></a>
                   </body>",
          $event->return);
    }

}
